<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/example/co_po_assessment/DatabaseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/example/co_po_assessment/DatabaseService.java" />
              <option name="originalContent" value="package org.example.co_po_assessment;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class DatabaseService {&#10;    private static final String DB_URL = &quot;jdbc:mysql://localhost:3306/SPL2&quot;;&#10;    private static final String DB_USER = &quot;root&quot;;&#10;    private static final String DB_PASSWORD = &quot;sinhawiz123&quot;;&#10;&#10;    private static DatabaseService instance;&#10;&#10;    private DatabaseService() {}&#10;&#10;    public static DatabaseService getInstance() {&#10;        if (instance == null) {&#10;            instance = new DatabaseService();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#10;    }&#10;&#10;    // Question related operations&#10;    public void saveQuizQuestion(String courseId, int quizNumber, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO QuizQuestion (quiz_id, title, marks, co_id, po_id)&#10;            SELECT q.id, ?, ?, co.id, po.id&#10;            FROM Quiz q, CO co, PO po&#10;            WHERE q.course_id = ? AND q.quiz_number = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setInt(4, quizNumber);&#10;            stmt.setString(5, co);&#10;            stmt.setString(6, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveMidQuestion(String courseId, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO MidQuestion (mid_id, title, marks, co_id, po_id)&#10;            SELECT m.id, ?, ?, co.id, po.id&#10;            FROM Mid m, CO co, PO po&#10;            WHERE m.course_id = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setString(4, co);&#10;            stmt.setString(5, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveFinalQuestion(String courseId, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO FinalQuestion (final_id, title, marks, co_id, po_id)&#10;            SELECT f.id, ?, ?, co.id, po.id&#10;            FROM Final f, CO co, PO po&#10;            WHERE f.course_id = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setString(4, co);&#10;            stmt.setString(5, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Retrieve questions&#10;    public List&lt;QuestionData&gt; getQuizQuestions(String courseId, int quizNumber) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT qq.title, qq.marks, c.co_number, p.po_number &#10;            FROM QuizQuestion qq&#10;            JOIN Quiz q ON qq.quiz_id = q.id&#10;            JOIN CO c ON qq.co_id = c.id&#10;            JOIN PO p ON qq.po_id = p.id&#10;            WHERE q.course_id = ? AND q.quiz_number = ?&#10;            ORDER BY qq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            stmt.setInt(2, quizNumber);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    public List&lt;QuestionData&gt; getMidQuestions(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT mq.title, mq.marks, c.co_number, p.po_number &#10;            FROM MidQuestion mq&#10;            JOIN Mid m ON mq.mid_id = m.id&#10;            JOIN CO c ON mq.co_id = c.id&#10;            JOIN PO p ON mq.po_id = p.id&#10;            WHERE m.course_id = ?&#10;            ORDER BY mq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    public List&lt;QuestionData&gt; getFinalQuestions(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT fq.title, fq.marks, c.co_number, p.po_number &#10;            FROM FinalQuestion fq&#10;            JOIN Final f ON fq.final_id = f.id&#10;            JOIN CO c ON fq.co_id = c.id&#10;            JOIN PO p ON fq.po_id = p.id&#10;            WHERE f.course_id = ?&#10;            ORDER BY fq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    // Student operations&#10;    public List&lt;StudentData&gt; getEnrolledStudents(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id, s.name, s.email, s.batch, s.programme, s.department&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            WHERE e.course_id = ?&#10;            ORDER BY s.id&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentData&gt; students = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                students.add(new StudentData(&#10;                    rs.getString(&quot;id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getInt(&quot;batch&quot;),&#10;                    rs.getString(&quot;programme&quot;),&#10;                    rs.getString(&quot;department&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return students;&#10;    }&#10;&#10;    // Course operations&#10;    public CourseData getCourseInfo(String courseCode) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_code, c.course_name, c.credits, f.full_name as instructor_name&#10;            FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE c.course_code = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return new CourseData(&#10;                    rs.getString(&quot;course_code&quot;),&#10;                    rs.getString(&quot;course_name&quot;),&#10;                    rs.getDouble(&quot;credits&quot;),&#10;                    rs.getString(&quot;instructor_name&quot;)&#10;                );&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Update course information&#10;    public void updateCourseInfo(String courseCode, String courseName, double credits) throws SQLException {&#10;        String sql = &quot;UPDATE Course SET course_name = ?, credits = ? WHERE course_code = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseName);&#10;            stmt.setDouble(2, credits);&#10;            stmt.setString(3, courseCode);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Update instructor for a course&#10;    public void updateCourseInstructor(String courseCode, String instructorName, String academicYear) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            UPDATE CourseAssignment ca&#10;            JOIN Faculty f ON f.full_name = ?&#10;            SET ca.faculty_id = f.id&#10;            WHERE ca.course_code = ? AND ca.academic_year = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, instructorName);&#10;            stmt.setString(2, courseCode);&#10;            stmt.setString(3, academicYear);&#10;            int rowsUpdated = stmt.executeUpdate();&#10;&#10;            if (rowsUpdated == 0) {&#10;                throw new SQLException(&quot;Instructor, course, or academic year not found, or assignment does not exist.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Create assessments if they don't exist&#10;    public void ensureAssessmentsExist(String courseId, String academicYear) throws SQLException {&#10;        try (Connection conn = getConnection()) {&#10;            // Create quizzes&#10;            for (int i = 1; i &lt;= 4; i++) {&#10;                String sql = &quot;INSERT IGNORE INTO Quiz (course_id, quiz_number, academic_year) VALUES (?, ?, ?)&quot;;&#10;                try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                    stmt.setString(1, courseId);&#10;                    stmt.setInt(2, i);&#10;                    stmt.setString(3, academicYear);&#10;                    stmt.executeUpdate();&#10;                }&#10;            }&#10;&#10;            // Create mid exam&#10;            String midSql = &quot;INSERT IGNORE INTO Mid (course_id, academic_year) VALUES (?, ?)&quot;;&#10;            try (PreparedStatement stmt = conn.prepareStatement(midSql)) {&#10;                stmt.setString(1, courseId);&#10;                stmt.setString(2, academicYear);&#10;                stmt.executeUpdate();&#10;            }&#10;&#10;            // Create final exam&#10;            String finalSql = &quot;INSERT IGNORE INTO Final (course_id, academic_year) VALUES (?, ?)&quot;;&#10;            try (PreparedStatement stmt = conn.prepareStatement(finalSql)) {&#10;                stmt.setString(1, courseId);&#10;                stmt.setString(2, academicYear);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Student marks operations&#10;    public void saveStudentQuizMarks(String studentId, int quizQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentQuizMarks (student_id, quiz_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, quizQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveStudentMidMarks(String studentId, int midQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentMidMarks (student_id, mid_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, midQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveStudentFinalMarks(String studentId, int finalQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentFinalMarks (student_id, final_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, finalQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Get student marks for specific assessments&#10;    public List&lt;StudentMarksData&gt; getStudentQuizMarks(String courseId, int quizNumber) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, qq.id as question_id, qq.title, qq.marks as max_marks,&#10;                   COALESCE(sqm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Quiz q ON c.course_code = q.course_id AND q.quiz_number = ?&#10;            JOIN QuizQuestion qq ON q.id = qq.quiz_id&#10;            LEFT JOIN StudentQuizMarks sqm ON s.id = sqm.student_id AND qq.id = sqm.quiz_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, qq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quizNumber);&#10;            stmt.setString(2, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    public List&lt;StudentMarksData&gt; getStudentMidMarks(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, mq.id as question_id, mq.title, mq.marks as max_marks,&#10;                   COALESCE(smm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Mid m ON c.course_code = m.course_id&#10;            JOIN MidQuestion mq ON m.id = mq.mid_id&#10;            LEFT JOIN StudentMidMarks smm ON s.id = smm.student_id AND mq.id = smm.mid_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, mq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    public List&lt;StudentMarksData&gt; getStudentFinalMarks(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, fq.id as question_id, fq.title, fq.marks as max_marks,&#10;                   COALESCE(sfm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Final f ON c.course_code = f.course_id&#10;            JOIN FinalQuestion fq ON f.id = fq.final_id&#10;            LEFT JOIN StudentFinalMarks sfm ON s.id = sfm.student_id AND fq.id = sfm.final_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, fq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    // Get comprehensive student performance&#10;    public List&lt;StudentPerformanceData&gt; getStudentPerformanceSummary(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id, s.name, s.batch,&#10;                   'Quiz' as assessment_type, q.quiz_number as assessment_number,&#10;                   qq.title as question_title, qq.marks as max_marks,&#10;                   COALESCE(sqm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Quiz q ON c.course_code = q.course_id&#10;            JOIN QuizQuestion qq ON q.id = qq.quiz_id&#10;            LEFT JOIN StudentQuizMarks sqm ON s.id = sqm.student_id AND qq.id = sqm.quiz_question_id&#10;            JOIN CO co ON qq.co_id = co.id&#10;            JOIN PO po ON qq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT s.id, s.name, s.batch,&#10;                   'Mid' as assessment_type, 0 as assessment_number,&#10;                   mq.title as question_title, mq.marks as max_marks,&#10;                   COALESCE(smm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Mid m ON c.course_code = m.course_id&#10;            JOIN MidQuestion mq ON m.id = mq.mid_id&#10;            LEFT JOIN StudentMidMarks smm ON s.id = smm.student_id AND mq.id = smm.mid_question_id&#10;            JOIN CO co ON mq.co_id = co.id&#10;            JOIN PO po ON mq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT s.id, s.name, s.batch,&#10;                   'Final' as assessment_type, 0 as assessment_number,&#10;                   fq.title as question_title, fq.marks as max_marks,&#10;                   COALESCE(sfm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Final f ON c.course_code = f.course_id&#10;            JOIN FinalQuestion fq ON f.id = fq.final_id&#10;            LEFT JOIN StudentFinalMarks sfm ON s.id = sfm.student_id AND fq.id = sfm.final_question_id&#10;            JOIN CO co ON fq.co_id = co.id&#10;            JOIN PO po ON fq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            ORDER BY id, assessment_type, assessment_number, question_title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentPerformanceData&gt; performance = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            stmt.setString(2, courseId);&#10;            stmt.setString(3, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                performance.add(new StudentPerformanceData(&#10;                    rs.getString(&quot;id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;batch&quot;),&#10;                    rs.getString(&quot;assessment_type&quot;),&#10;                    rs.getInt(&quot;assessment_number&quot;),&#10;                    rs.getString(&quot;question_title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return performance;&#10;    }&#10;&#10;    // Insert methods for initial data setup&#10;    public void insertCourse(String courseCode, String courseName, double credits) throws SQLException {&#10;        String sql = &quot;INSERT INTO Course (course_code, course_name, credits) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            stmt.setString(2, courseName);&#10;            stmt.setDouble(3, credits);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertFaculty(int id, String shortname, String fullName, String email, String password) throws SQLException {&#10;        String sql = &quot;INSERT INTO Faculty (id, shortname, full_name, email, password) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        // Hash if not already hashed (BCrypt pattern)&#10;        if (!PasswordUtils.isHashed(password)) {&#10;            password = PasswordUtils.hash(password);&#10;        }&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            stmt.setString(2, shortname);&#10;            stmt.setString(3, fullName);&#10;            stmt.setString(4, email);&#10;            stmt.setString(5, password);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void assignCourseToFaculty(int facultyId, String courseCode, String academicYear) throws SQLException {&#10;        String sql = &quot;INSERT INTO CourseAssignment (faculty_id, course_code, academic_year) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, facultyId);&#10;            stmt.setString(2, courseCode);&#10;            stmt.setString(3, academicYear);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertStudent(String id, int batch, String name, String email, String department, String programme) throws SQLException {&#10;        String sql = &quot;INSERT INTO Student (id, batch, name, email, department, programme) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, id);&#10;            stmt.setInt(2, batch);&#10;            stmt.setString(3, name);&#10;            stmt.setString(4, email);&#10;            stmt.setString(5, department);&#10;            stmt.setString(6, programme);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void enrollStudent(String studentId, String courseCode) throws SQLException {&#10;        String sql = &quot;INSERT INTO Enrollment (student_id, course_id) VALUES (?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setString(2, courseCode);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertCO(String coNumber) throws SQLException {&#10;        String sql = &quot;INSERT INTO CO (co_number) VALUES (?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, coNumber);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertPO(String poNumber) throws SQLException {&#10;        String sql = &quot;INSERT INTO PO (po_number) VALUES (?) ON DUPLICATE KEY UPDATE po_number = VALUES(po_number)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, poNumber);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertAdmin(String email, String password) throws SQLException {&#10;        String sql = &quot;INSERT INTO Admin (email, password) VALUES (?, ?)&quot;;&#10;        if (!PasswordUtils.isHashed(password)) {&#10;            password = PasswordUtils.hash(password);&#10;        }&#10;        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, email);&#10;            stmt.setString(2, password);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public boolean authenticateAdmin(String email, String rawPassword) throws SQLException {&#10;        String select = &quot;SELECT id, password FROM Admin WHERE email = ?&quot;;&#10;        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(select)) {&#10;            ps.setString(1, email);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return false;&#10;                String stored = rs.getString(&quot;password&quot;);&#10;                boolean match = PasswordUtils.matches(rawPassword, stored);&#10;                if (match &amp;&amp; !PasswordUtils.isHashed(stored)) {&#10;                    // upgrade legacy plain text to hash&#10;                    String newHash = PasswordUtils.hash(rawPassword);&#10;                    try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Admin SET password=? WHERE email=?&quot;)) {&#10;                        up.setString(1, newHash);&#10;                        up.setString(2, email);&#10;                        up.executeUpdate();&#10;                    }&#10;                }&#10;                return match;&#10;            }&#10;        }&#10;    }&#10;&#10;    public boolean authenticateFaculty(String email, String rawPassword) throws SQLException {&#10;        String select = &quot;SELECT id, password FROM Faculty WHERE email = ?&quot;;&#10;        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(select)) {&#10;            ps.setString(1, email);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return false;&#10;                String stored = rs.getString(&quot;password&quot;);&#10;                boolean match = PasswordUtils.matches(rawPassword, stored);&#10;                if (match &amp;&amp; !PasswordUtils.isHashed(stored)) {&#10;                    String newHash = PasswordUtils.hash(rawPassword);&#10;                    try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Faculty SET password=? WHERE email=?&quot;)) {&#10;                        up.setString(1, newHash);&#10;                        up.setString(2, email);&#10;                        up.executeUpdate();&#10;                    }&#10;                }&#10;                return match;&#10;            }&#10;        }&#10;    }&#10;&#10;    // Database-related methods for dropdowns&#10;    public List&lt;String&gt; getCourseCodes() throws SQLException {&#10;        String sql = &quot;SELECT DISTINCT course_code FROM Course ORDER BY course_code&quot;;&#10;        List&lt;String&gt; courseCodes = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                courseCodes.add(rs.getString(&quot;course_code&quot;));&#10;            }&#10;        }&#10;        return courseCodes;&#10;    }&#10;&#10;    public List&lt;String&gt; getInstructorNames() throws SQLException {&#10;        String sql = &quot;SELECT DISTINCT f.full_name FROM Faculty f ORDER BY f.full_name&quot;;&#10;        List&lt;String&gt; instructors = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                instructors.add(rs.getString(&quot;full_name&quot;));&#10;            }&#10;        }&#10;        return instructors;&#10;    }&#10;&#10;    public List&lt;String&gt; getCoursesByInstructor(String instructorName) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_name FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE f.full_name = ?&#10;            ORDER BY c.course_name&#10;            &quot;&quot;&quot;;&#10;        List&lt;String&gt; courses = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, instructorName);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                courses.add(rs.getString(&quot;course_name&quot;));&#10;            }&#10;        }&#10;        return courses;&#10;    }&#10;&#10;    public List&lt;String&gt; getAcademicYears() throws SQLException {&#10;        // Generate academic years based on current year&#10;        List&lt;String&gt; years = new ArrayList&lt;&gt;();&#10;        int currentYear = java.time.Year.now().getValue();&#10;        for (int i = currentYear - 5; i &lt;= currentYear + 2; i++) {&#10;            years.add(i + &quot;-&quot; + (i + 1));&#10;        }&#10;        return years;&#10;    }&#10;&#10;    public CourseData getCourseByCodeAndInstructor(String courseCode, String instructorName) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_code, c.course_name, c.credits, f.full_name as instructor_name&#10;            FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE c.course_code = ? AND f.full_name = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            stmt.setString(2, instructorName);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return new CourseData(&#10;                    rs.getString(&quot;course_code&quot;),&#10;                    rs.getString(&quot;course_name&quot;),&#10;                    rs.getDouble(&quot;credits&quot;),&#10;                    rs.getString(&quot;instructor_name&quot;)&#10;                );&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Data classes&#10;    public static class QuestionData {&#10;        public final String title;&#10;        public final double marks;&#10;        public final String co;&#10;        public final String po;&#10;&#10;        public QuestionData(String title, double marks, String co, String po) {&#10;            this.title = title;&#10;            this.marks = marks;&#10;            this.co = co;&#10;            this.po = po;&#10;        }&#10;    }&#10;&#10;    public static class StudentData {&#10;        public final String id;&#10;        public final String name;&#10;        public final String email;&#10;        public final int batch;&#10;        public final String programme;&#10;        public final String department;&#10;&#10;        public StudentData(String id, String name, String email, int batch, String programme, String department) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.batch = batch;&#10;            this.programme = programme;&#10;            this.department = department;&#10;        }&#10;    }&#10;&#10;    public static class CourseData {&#10;        public final String courseCode;&#10;        public final String courseName;&#10;        public final double credits;&#10;        public final String instructorName;&#10;&#10;        public CourseData(String courseCode, String courseName, double credits, String instructorName) {&#10;            this.courseCode = courseCode;&#10;            this.courseName = courseName;&#10;            this.credits = credits;&#10;            this.instructorName = instructorName;&#10;        }&#10;    }&#10;&#10;    public static class StudentMarksData {&#10;        public final String studentId;&#10;        public final String studentName;&#10;        public final int questionId;&#10;        public final String questionTitle;&#10;        public final double maxMarks;&#10;        public final double marksObtained;&#10;&#10;        public StudentMarksData(String studentId, String studentName, int questionId, String questionTitle, double maxMarks, double marksObtained) {&#10;            this.studentId = studentId;&#10;            this.studentName = studentName;&#10;            this.questionId = questionId;&#10;            this.questionTitle = questionTitle;&#10;            this.maxMarks = maxMarks;&#10;            this.marksObtained = marksObtained;&#10;        }&#10;    }&#10;&#10;    public static class StudentPerformanceData {&#10;        public final String studentId;&#10;        public final String studentName;&#10;        public final int batch;&#10;        public final String assessmentType;&#10;        public final int assessmentNumber;&#10;        public final String questionTitle;&#10;        public final double maxMarks;&#10;        public final double marksObtained;&#10;        public final String coNumber;&#10;        public final String poNumber;&#10;&#10;        public StudentPerformanceData(String studentId, String studentName, int batch, String assessmentType, int assessmentNumber, String questionTitle, double maxMarks, double marksObtained, String coNumber, String poNumber) {&#10;            this.studentId = studentId;&#10;            this.studentName = studentName;&#10;            this.batch = batch;&#10;            this.assessmentType = assessmentType;&#10;            this.assessmentNumber = assessmentNumber;&#10;            this.questionTitle = questionTitle;&#10;            this.maxMarks = maxMarks;&#10;            this.marksObtained = marksObtained;&#10;            this.coNumber = coNumber;&#10;            this.poNumber = poNumber;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example.co_po_assessment;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class DatabaseService {&#10;    private static final String DB_URL = &quot;jdbc:mysql://localhost:3306/SPL2&quot;;&#10;    private static final String DB_USER = &quot;root&quot;;&#10;    private static final String DB_PASSWORD = &quot;sinhawiz123&quot;;&#10;&#10;    private static DatabaseService instance;&#10;&#10;    private DatabaseService() {&#10;        try {&#10;            upgradeLegacyPasswords();&#10;        } catch (Exception ignored) {&#10;            // Swallow to avoid startup failure; logging could be added&#10;        }&#10;    }&#10;&#10;    public static DatabaseService getInstance() {&#10;        if (instance == null) {&#10;            instance = new DatabaseService();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    private Connection getConnection() throws SQLException {&#10;        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);&#10;    }&#10;&#10;    private void upgradeLegacyPasswords() throws SQLException {&#10;        try (Connection conn = getConnection()) {&#10;            // Faculty&#10;            try (PreparedStatement ps = conn.prepareStatement(&quot;SELECT email, password FROM Faculty&quot;);&#10;                 ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    String email = rs.getString(1);&#10;                    String pwd = rs.getString(2);&#10;                    if (pwd != null &amp;&amp; !PasswordUtils.isHashed(pwd)) {&#10;                        String hashed = PasswordUtils.hash(pwd);&#10;                        try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Faculty SET password=? WHERE email=?&quot;)) {&#10;                            up.setString(1, hashed);&#10;                            up.setString(2, email);&#10;                            up.executeUpdate();&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            // Admin&#10;            try (PreparedStatement ps = conn.prepareStatement(&quot;SELECT email, password FROM Admin&quot;);&#10;                 ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    String email = rs.getString(1);&#10;                    String pwd = rs.getString(2);&#10;                    if (pwd != null &amp;&amp; !PasswordUtils.isHashed(pwd)) {&#10;                        String hashed = PasswordUtils.hash(pwd);&#10;                        try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Admin SET password=? WHERE email=?&quot;)) {&#10;                            up.setString(1, hashed);&#10;                            up.setString(2, email);&#10;                            up.executeUpdate();&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Question related operations&#10;    public void saveQuizQuestion(String courseId, int quizNumber, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO QuizQuestion (quiz_id, title, marks, co_id, po_id)&#10;            SELECT q.id, ?, ?, co.id, po.id&#10;            FROM Quiz q, CO co, PO po&#10;            WHERE q.course_id = ? AND q.quiz_number = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setInt(4, quizNumber);&#10;            stmt.setString(5, co);&#10;            stmt.setString(6, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveMidQuestion(String courseId, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO MidQuestion (mid_id, title, marks, co_id, po_id)&#10;            SELECT m.id, ?, ?, co.id, po.id&#10;            FROM Mid m, CO co, PO po&#10;            WHERE m.course_id = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setString(4, co);&#10;            stmt.setString(5, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveFinalQuestion(String courseId, String title, double marks, String co, String po) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO FinalQuestion (final_id, title, marks, co_id, po_id)&#10;            SELECT f.id, ?, ?, co.id, po.id&#10;            FROM Final f, CO co, PO po&#10;            WHERE f.course_id = ?&#10;            AND co.co_number = ?&#10;            AND po.po_number = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, title);&#10;            stmt.setDouble(2, marks);&#10;            stmt.setString(3, courseId);&#10;            stmt.setString(4, co);&#10;            stmt.setString(5, po);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Retrieve questions&#10;    public List&lt;QuestionData&gt; getQuizQuestions(String courseId, int quizNumber) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT qq.title, qq.marks, c.co_number, p.po_number &#10;            FROM QuizQuestion qq&#10;            JOIN Quiz q ON qq.quiz_id = q.id&#10;            JOIN CO c ON qq.co_id = c.id&#10;            JOIN PO p ON qq.po_id = p.id&#10;            WHERE q.course_id = ? AND q.quiz_number = ?&#10;            ORDER BY qq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            stmt.setInt(2, quizNumber);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    public List&lt;QuestionData&gt; getMidQuestions(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT mq.title, mq.marks, c.co_number, p.po_number &#10;            FROM MidQuestion mq&#10;            JOIN Mid m ON mq.mid_id = m.id&#10;            JOIN CO c ON mq.co_id = c.id&#10;            JOIN PO p ON mq.po_id = p.id&#10;            WHERE m.course_id = ?&#10;            ORDER BY mq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    public List&lt;QuestionData&gt; getFinalQuestions(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT fq.title, fq.marks, c.co_number, p.po_number &#10;            FROM FinalQuestion fq&#10;            JOIN Final f ON fq.final_id = f.id&#10;            JOIN CO c ON fq.co_id = c.id&#10;            JOIN PO p ON fq.po_id = p.id&#10;            WHERE f.course_id = ?&#10;            ORDER BY fq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;QuestionData&gt; questions = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                questions.add(new QuestionData(&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;marks&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return questions;&#10;    }&#10;&#10;    // Student operations&#10;    public List&lt;StudentData&gt; getEnrolledStudents(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id, s.name, s.email, s.batch, s.programme, s.department&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            WHERE e.course_id = ?&#10;            ORDER BY s.id&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentData&gt; students = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                students.add(new StudentData(&#10;                    rs.getString(&quot;id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getString(&quot;email&quot;),&#10;                    rs.getInt(&quot;batch&quot;),&#10;                    rs.getString(&quot;programme&quot;),&#10;                    rs.getString(&quot;department&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return students;&#10;    }&#10;&#10;    // Course operations&#10;    public CourseData getCourseInfo(String courseCode) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_code, c.course_name, c.credits, f.full_name as instructor_name&#10;            FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE c.course_code = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return new CourseData(&#10;                    rs.getString(&quot;course_code&quot;),&#10;                    rs.getString(&quot;course_name&quot;),&#10;                    rs.getDouble(&quot;credits&quot;),&#10;                    rs.getString(&quot;instructor_name&quot;)&#10;                );&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Update course information&#10;    public void updateCourseInfo(String courseCode, String courseName, double credits) throws SQLException {&#10;        String sql = &quot;UPDATE Course SET course_name = ?, credits = ? WHERE course_code = ?&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseName);&#10;            stmt.setDouble(2, credits);&#10;            stmt.setString(3, courseCode);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Update instructor for a course&#10;    public void updateCourseInstructor(String courseCode, String instructorName, String academicYear) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            UPDATE CourseAssignment ca&#10;            JOIN Faculty f ON f.full_name = ?&#10;            SET ca.faculty_id = f.id&#10;            WHERE ca.course_code = ? AND ca.academic_year = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, instructorName);&#10;            stmt.setString(2, courseCode);&#10;            stmt.setString(3, academicYear);&#10;            int rowsUpdated = stmt.executeUpdate();&#10;&#10;            if (rowsUpdated == 0) {&#10;                throw new SQLException(&quot;Instructor, course, or academic year not found, or assignment does not exist.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Create assessments if they don't exist&#10;    public void ensureAssessmentsExist(String courseId, String academicYear) throws SQLException {&#10;        try (Connection conn = getConnection()) {&#10;            // Create quizzes&#10;            for (int i = 1; i &lt;= 4; i++) {&#10;                String sql = &quot;INSERT IGNORE INTO Quiz (course_id, quiz_number, academic_year) VALUES (?, ?, ?)&quot;;&#10;                try (PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;                    stmt.setString(1, courseId);&#10;                    stmt.setInt(2, i);&#10;                    stmt.setString(3, academicYear);&#10;                    stmt.executeUpdate();&#10;                }&#10;            }&#10;&#10;            // Create mid exam&#10;            String midSql = &quot;INSERT IGNORE INTO Mid (course_id, academic_year) VALUES (?, ?)&quot;;&#10;            try (PreparedStatement stmt = conn.prepareStatement(midSql)) {&#10;                stmt.setString(1, courseId);&#10;                stmt.setString(2, academicYear);&#10;                stmt.executeUpdate();&#10;            }&#10;&#10;            // Create final exam&#10;            String finalSql = &quot;INSERT IGNORE INTO Final (course_id, academic_year) VALUES (?, ?)&quot;;&#10;            try (PreparedStatement stmt = conn.prepareStatement(finalSql)) {&#10;                stmt.setString(1, courseId);&#10;                stmt.setString(2, academicYear);&#10;                stmt.executeUpdate();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Student marks operations&#10;    public void saveStudentQuizMarks(String studentId, int quizQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentQuizMarks (student_id, quiz_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, quizQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveStudentMidMarks(String studentId, int midQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentMidMarks (student_id, mid_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, midQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void saveStudentFinalMarks(String studentId, int finalQuestionId, double marksObtained) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            INSERT INTO StudentFinalMarks (student_id, final_question_id, marks_obtained)&#10;            VALUES (?, ?, ?)&#10;            ON DUPLICATE KEY UPDATE marks_obtained = VALUES(marks_obtained)&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setInt(2, finalQuestionId);&#10;            stmt.setDouble(3, marksObtained);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Get student marks for specific assessments&#10;    public List&lt;StudentMarksData&gt; getStudentQuizMarks(String courseId, int quizNumber) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, qq.id as question_id, qq.title, qq.marks as max_marks,&#10;                   COALESCE(sqm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Quiz q ON c.course_code = q.course_id AND q.quiz_number = ?&#10;            JOIN QuizQuestion qq ON q.id = qq.quiz_id&#10;            LEFT JOIN StudentQuizMarks sqm ON s.id = sqm.student_id AND qq.id = sqm.quiz_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, qq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, quizNumber);&#10;            stmt.setString(2, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    public List&lt;StudentMarksData&gt; getStudentMidMarks(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, mq.id as question_id, mq.title, mq.marks as max_marks,&#10;                   COALESCE(smm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Mid m ON c.course_code = m.course_id&#10;            JOIN MidQuestion mq ON m.id = mq.mid_id&#10;            LEFT JOIN StudentMidMarks smm ON s.id = smm.student_id AND mq.id = smm.mid_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, mq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    public List&lt;StudentMarksData&gt; getStudentFinalMarks(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id as student_id, s.name, fq.id as question_id, fq.title, fq.marks as max_marks,&#10;                   COALESCE(sfm.marks_obtained, 0) as marks_obtained&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Final f ON c.course_code = f.course_id&#10;            JOIN FinalQuestion fq ON f.id = fq.final_id&#10;            LEFT JOIN StudentFinalMarks sfm ON s.id = sfm.student_id AND fq.id = sfm.final_question_id&#10;            WHERE c.course_code = ?&#10;            ORDER BY s.id, fq.title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentMarksData&gt; marks = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                marks.add(new StudentMarksData(&#10;                    rs.getString(&quot;student_id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;question_id&quot;),&#10;                    rs.getString(&quot;title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return marks;&#10;    }&#10;&#10;    // Get comprehensive student performance&#10;    public List&lt;StudentPerformanceData&gt; getStudentPerformanceSummary(String courseId) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT s.id, s.name, s.batch,&#10;                   'Quiz' as assessment_type, q.quiz_number as assessment_number,&#10;                   qq.title as question_title, qq.marks as max_marks,&#10;                   COALESCE(sqm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Quiz q ON c.course_code = q.course_id&#10;            JOIN QuizQuestion qq ON q.id = qq.quiz_id&#10;            LEFT JOIN StudentQuizMarks sqm ON s.id = sqm.student_id AND qq.id = sqm.quiz_question_id&#10;            JOIN CO co ON qq.co_id = co.id&#10;            JOIN PO po ON qq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT s.id, s.name, s.batch,&#10;                   'Mid' as assessment_type, 0 as assessment_number,&#10;                   mq.title as question_title, mq.marks as max_marks,&#10;                   COALESCE(smm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Mid m ON c.course_code = m.course_id&#10;            JOIN MidQuestion mq ON m.id = mq.mid_id&#10;            LEFT JOIN StudentMidMarks smm ON s.id = smm.student_id AND mq.id = smm.mid_question_id&#10;            JOIN CO co ON mq.co_id = co.id&#10;            JOIN PO po ON mq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            UNION ALL&#10;            &#10;            SELECT s.id, s.name, s.batch,&#10;                   'Final' as assessment_type, 0 as assessment_number,&#10;                   fq.title as question_title, fq.marks as max_marks,&#10;                   COALESCE(sfm.marks_obtained, 0) as marks_obtained,&#10;                   co.co_number, po.po_number&#10;            FROM Student s&#10;            JOIN Enrollment e ON s.id = e.student_id&#10;            JOIN Course c ON e.course_id = c.course_code&#10;            JOIN Final f ON c.course_code = f.course_id&#10;            JOIN FinalQuestion fq ON f.id = fq.final_id&#10;            LEFT JOIN StudentFinalMarks sfm ON s.id = sfm.student_id AND fq.id = sfm.final_question_id&#10;            JOIN CO co ON fq.co_id = co.id&#10;            JOIN PO po ON fq.po_id = po.id&#10;            WHERE c.course_code = ?&#10;            &#10;            ORDER BY id, assessment_type, assessment_number, question_title&#10;            &quot;&quot;&quot;;&#10;&#10;        List&lt;StudentPerformanceData&gt; performance = new ArrayList&lt;&gt;();&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseId);&#10;            stmt.setString(2, courseId);&#10;            stmt.setString(3, courseId);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                performance.add(new StudentPerformanceData(&#10;                    rs.getString(&quot;id&quot;),&#10;                    rs.getString(&quot;name&quot;),&#10;                    rs.getInt(&quot;batch&quot;),&#10;                    rs.getString(&quot;assessment_type&quot;),&#10;                    rs.getInt(&quot;assessment_number&quot;),&#10;                    rs.getString(&quot;question_title&quot;),&#10;                    rs.getDouble(&quot;max_marks&quot;),&#10;                    rs.getDouble(&quot;marks_obtained&quot;),&#10;                    rs.getString(&quot;co_number&quot;),&#10;                    rs.getString(&quot;po_number&quot;)&#10;                ));&#10;            }&#10;        }&#10;        return performance;&#10;    }&#10;&#10;    // Insert methods for initial data setup&#10;    public void insertCourse(String courseCode, String courseName, double credits) throws SQLException {&#10;        String sql = &quot;INSERT INTO Course (course_code, course_name, credits) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            stmt.setString(2, courseName);&#10;            stmt.setDouble(3, credits);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertFaculty(int id, String shortname, String fullName, String email, String password) throws SQLException {&#10;        String sql = &quot;INSERT INTO Faculty (id, shortname, full_name, email, password) VALUES (?, ?, ?, ?, ?)&quot;;&#10;&#10;        // Hash if not already hashed (BCrypt pattern)&#10;        if (!PasswordUtils.isHashed(password)) {&#10;            password = PasswordUtils.hash(password);&#10;        }&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, id);&#10;            stmt.setString(2, shortname);&#10;            stmt.setString(3, fullName);&#10;            stmt.setString(4, email);&#10;            stmt.setString(5, password);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void assignCourseToFaculty(int facultyId, String courseCode, String academicYear) throws SQLException {&#10;        String sql = &quot;INSERT INTO CourseAssignment (faculty_id, course_code, academic_year) VALUES (?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setInt(1, facultyId);&#10;            stmt.setString(2, courseCode);&#10;            stmt.setString(3, academicYear);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertStudent(String id, int batch, String name, String email, String department, String programme) throws SQLException {&#10;        String sql = &quot;INSERT INTO Student (id, batch, name, email, department, programme) VALUES (?, ?, ?, ?, ?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, id);&#10;            stmt.setInt(2, batch);&#10;            stmt.setString(3, name);&#10;            stmt.setString(4, email);&#10;            stmt.setString(5, department);&#10;            stmt.setString(6, programme);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void enrollStudent(String studentId, String courseCode) throws SQLException {&#10;        String sql = &quot;INSERT INTO Enrollment (student_id, course_id) VALUES (?, ?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, studentId);&#10;            stmt.setString(2, courseCode);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertCO(String coNumber) throws SQLException {&#10;        String sql = &quot;INSERT INTO CO (co_number) VALUES (?)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, coNumber);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertPO(String poNumber) throws SQLException {&#10;        String sql = &quot;INSERT INTO PO (po_number) VALUES (?) ON DUPLICATE KEY UPDATE po_number = VALUES(po_number)&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, poNumber);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public void insertAdmin(String email, String password) throws SQLException {&#10;        String sql = &quot;INSERT INTO Admin (email, password) VALUES (?, ?)&quot;;&#10;        if (!PasswordUtils.isHashed(password)) {&#10;            password = PasswordUtils.hash(password);&#10;        }&#10;        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, email);&#10;            stmt.setString(2, password);&#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    public boolean authenticateAdmin(String email, String rawPassword) throws SQLException {&#10;        String select = &quot;SELECT id, password FROM Admin WHERE email = ?&quot;;&#10;        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(select)) {&#10;            ps.setString(1, email);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return false;&#10;                String stored = rs.getString(&quot;password&quot;);&#10;                boolean match = PasswordUtils.matches(rawPassword, stored);&#10;                if (match &amp;&amp; !PasswordUtils.isHashed(stored)) {&#10;                    // upgrade legacy plain text to hash&#10;                    String newHash = PasswordUtils.hash(rawPassword);&#10;                    try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Admin SET password=? WHERE email=?&quot;)) {&#10;                        up.setString(1, newHash);&#10;                        up.setString(2, email);&#10;                        up.executeUpdate();&#10;                    }&#10;                }&#10;                return match;&#10;            }&#10;        }&#10;    }&#10;&#10;    public boolean authenticateFaculty(String email, String rawPassword) throws SQLException {&#10;        String select = &quot;SELECT id, password FROM Faculty WHERE email = ?&quot;;&#10;        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(select)) {&#10;            ps.setString(1, email);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                if (!rs.next()) return false;&#10;                String stored = rs.getString(&quot;password&quot;);&#10;                boolean match = PasswordUtils.matches(rawPassword, stored);&#10;                if (match &amp;&amp; !PasswordUtils.isHashed(stored)) {&#10;                    String newHash = PasswordUtils.hash(rawPassword);&#10;                    try (PreparedStatement up = conn.prepareStatement(&quot;UPDATE Faculty SET password=? WHERE email=?&quot;)) {&#10;                        up.setString(1, newHash);&#10;                        up.setString(2, email);&#10;                        up.executeUpdate();&#10;                    }&#10;                }&#10;                return match;&#10;            }&#10;        }&#10;    }&#10;&#10;    // Database-related methods for dropdowns&#10;    public List&lt;String&gt; getCourseCodes() throws SQLException {&#10;        String sql = &quot;SELECT DISTINCT course_code FROM Course ORDER BY course_code&quot;;&#10;        List&lt;String&gt; courseCodes = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                courseCodes.add(rs.getString(&quot;course_code&quot;));&#10;            }&#10;        }&#10;        return courseCodes;&#10;    }&#10;&#10;    public List&lt;String&gt; getInstructorNames() throws SQLException {&#10;        String sql = &quot;SELECT DISTINCT f.full_name FROM Faculty f ORDER BY f.full_name&quot;;&#10;        List&lt;String&gt; instructors = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                instructors.add(rs.getString(&quot;full_name&quot;));&#10;            }&#10;        }&#10;        return instructors;&#10;    }&#10;&#10;    public List&lt;String&gt; getCoursesByInstructor(String instructorName) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_name FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE f.full_name = ?&#10;            ORDER BY c.course_name&#10;            &quot;&quot;&quot;;&#10;        List&lt;String&gt; courses = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, instructorName);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            while (rs.next()) {&#10;                courses.add(rs.getString(&quot;course_name&quot;));&#10;            }&#10;        }&#10;        return courses;&#10;    }&#10;&#10;    public List&lt;String&gt; getAcademicYears() throws SQLException {&#10;        // Generate academic years based on current year&#10;        List&lt;String&gt; years = new ArrayList&lt;&gt;();&#10;        int currentYear = java.time.Year.now().getValue();&#10;        for (int i = currentYear - 5; i &lt;= currentYear + 2; i++) {&#10;            years.add(i + &quot;-&quot; + (i + 1));&#10;        }&#10;        return years;&#10;    }&#10;&#10;    public CourseData getCourseByCodeAndInstructor(String courseCode, String instructorName) throws SQLException {&#10;        String sql = &quot;&quot;&quot;&#10;            SELECT c.course_code, c.course_name, c.credits, f.full_name as instructor_name&#10;            FROM Course c&#10;            JOIN CourseAssignment ca ON c.course_code = ca.course_code&#10;            JOIN Faculty f ON ca.faculty_id = f.id&#10;            WHERE c.course_code = ? AND f.full_name = ?&#10;            &quot;&quot;&quot;;&#10;&#10;        try (Connection conn = getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            stmt.setString(1, courseCode);&#10;            stmt.setString(2, instructorName);&#10;            ResultSet rs = stmt.executeQuery();&#10;&#10;            if (rs.next()) {&#10;                return new CourseData(&#10;                    rs.getString(&quot;course_code&quot;),&#10;                    rs.getString(&quot;course_name&quot;),&#10;                    rs.getDouble(&quot;credits&quot;),&#10;                    rs.getString(&quot;instructor_name&quot;)&#10;                );&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Data classes&#10;    public static class QuestionData {&#10;        public final String title;&#10;        public final double marks;&#10;        public final String co;&#10;        public final String po;&#10;&#10;        public QuestionData(String title, double marks, String co, String po) {&#10;            this.title = title;&#10;            this.marks = marks;&#10;            this.co = co;&#10;            this.po = po;&#10;        }&#10;    }&#10;&#10;    public static class StudentData {&#10;        public final String id;&#10;        public final String name;&#10;        public final String email;&#10;        public final int batch;&#10;        public final String programme;&#10;        public final String department;&#10;&#10;        public StudentData(String id, String name, String email, int batch, String programme, String department) {&#10;            this.id = id;&#10;            this.name = name;&#10;            this.email = email;&#10;            this.batch = batch;&#10;            this.programme = programme;&#10;            this.department = department;&#10;        }&#10;    }&#10;&#10;    public static class CourseData {&#10;        public final String courseCode;&#10;        public final String courseName;&#10;        public final double credits;&#10;        public final String instructorName;&#10;&#10;        public CourseData(String courseCode, String courseName, double credits, String instructorName) {&#10;            this.courseCode = courseCode;&#10;            this.courseName = courseName;&#10;            this.credits = credits;&#10;            this.instructorName = instructorName;&#10;        }&#10;    }&#10;&#10;    public static class StudentMarksData {&#10;        public final String studentId;&#10;        public final String studentName;&#10;        public final int questionId;&#10;        public final String questionTitle;&#10;        public final double maxMarks;&#10;        public final double marksObtained;&#10;&#10;        public StudentMarksData(String studentId, String studentName, int questionId, String questionTitle, double maxMarks, double marksObtained) {&#10;            this.studentId = studentId;&#10;            this.studentName = studentName;&#10;            this.questionId = questionId;&#10;            this.questionTitle = questionTitle;&#10;            this.maxMarks = maxMarks;&#10;            this.marksObtained = marksObtained;&#10;        }&#10;    }&#10;&#10;    public static class StudentPerformanceData {&#10;        public final String studentId;&#10;        public final String studentName;&#10;        public final int batch;&#10;        public final String assessmentType;&#10;        public final int assessmentNumber;&#10;        public final String questionTitle;&#10;        public final double maxMarks;&#10;        public final double marksObtained;&#10;        public final String coNumber;&#10;        public final String poNumber;&#10;&#10;        public StudentPerformanceData(String studentId, String studentName, int batch, String assessmentType, int assessmentNumber, String questionTitle, double maxMarks, double marksObtained, String coNumber, String poNumber) {&#10;            this.studentId = studentId;&#10;            this.studentName = studentName;&#10;            this.batch = batch;&#10;            this.assessmentType = assessmentType;&#10;            this.assessmentNumber = assessmentNumber;&#10;            this.questionTitle = questionTitle;&#10;            this.maxMarks = maxMarks;&#10;            this.marksObtained = marksObtained;&#10;            this.coNumber = coNumber;&#10;            this.poNumber = poNumber;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>